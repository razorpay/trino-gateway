syntax = "proto3";

package razorpay.gateway;

// import "google/protobuf/struct.proto";

option go_package = "./rpc/gateway;gatewayv1";

message Empty {}

service BackendApi {
    rpc CreateOrUpdateBackend (Backend) returns (Empty);
    rpc GetBackend (BackendGetRequest) returns (BackendGetResponse);
    rpc ListAllBackends (Empty) returns (BackendListAllResponse);
    rpc DeleteBackend (BackendDeleteRequest) returns (Empty);
    rpc EnableBackend (BackendEnableRequest) returns (Empty);
    rpc DisableBackend (BackendDisableRequest) returns (Empty);
}

message Backend {
    enum Scheme {
        http = 0;
        https = 1;
    }
    string hostname = 1; // required
    Scheme scheme = 2; // required
    string id = 3;
    string external_url = 4;
    bool is_enabled = 5;
    string uptime_schedule = 6;
}

message BackendCreateResponse {
    string id = 1; // required
}

message BackendGetRequest {
    string id = 1; // required
}

message BackendGetResponse {
    Backend backend = 1; //required
}

message BackendListAllResponse {
    repeated Backend items = 1;
}

message BackendDeleteRequest {
    string id = 1; // required
}

message BackendEnableRequest {
    string id = 1; // required
}

message BackendDisableRequest {
    string id = 1; // required
}

service GroupApi {
    rpc CreateOrUpdateGroup (Group) returns (Empty);
    rpc GetGroup (GroupGetRequest) returns (GroupGetResponse);
    rpc ListAllGroups (Empty) returns (GroupListAllResponse);
    rpc DeleteGroup (GroupDeleteRequest) returns (Empty);
    rpc EnableGroup (GroupEnableRequest) returns (Empty);
    rpc DisableGroup (GroupDisableRequest) returns (Empty);

    rpc EvaluateBackendForGroup(EvaluateBackendRequest) returns (Backend);
}

message Group {
    enum RoutingStrategy {
        ROUND_ROBIN = 0;
        RANDOM = 1;
    }
    string id = 1; // required
    repeated string backends = 2; // required
    RoutingStrategy strategy = 3;
    bool is_enabled = 4;
}

message GroupGetRequest {
    string id = 1; // required
}

message GroupGetResponse {
    Group group = 2;
}

message GroupListAllResponse {
    repeated Group items = 1;
}

message GroupDeleteRequest {
    string id = 1; // required
}

message GroupEnableRequest {
    string id = 1; // required
}

message GroupDisableRequest {
    string id = 1; // required
}

service PolicyApi {
    rpc CreateOrUpdatePolicy (Policy) returns (Empty);
    rpc GetPolicy (PolicyGetRequest) returns (PolicyGetResponse);
    rpc ListAllPolicies (Empty) returns (PolicyListAllResponse);
    rpc DeletePolicy (PolicyDeleteRequest) returns (Empty);
    rpc EnablePolicy (PolicyEnableRequest) returns (Empty);
    rpc DisablePolicy (PolicyDisableRequest) returns (Empty);

    rpc EvaluateGroupForClient(EvaluateGroupRequest) returns (Group);
}

message Policy {
    message Rule {
        enum RuleType {
            header_connection_properties = 0;
            header_client_tags = 1;
            header_host = 2;
            listening_port = 3;
            // cron = 4;
        }
        RuleType type = 1; // required
        string value = 2; // required
    }
    string id = 1; // required
    Rule rule = 2; // required
    string group = 3; // required
    string fallback_group = 4;
    bool is_enabled = 5;
}

message PolicyGetRequest {
    string id = 1; // required
}

message PolicyGetResponse {
    Policy policy = 1; // required
}

message PolicyListAllResponse {
    repeated Policy items = 1;
}

message PolicyDeleteRequest {
    string id = 1; // required
}

message PolicyEnableRequest {
    string id = 1; // required
}

message PolicyDisableRequest {
    string id = 1; // required
}

service QueryApi {
    rpc CreateQuery (Query) returns (Empty);
    rpc GetQuery (QueryGetRequest) returns (QueryGetResponse);
    rpc ListQueries (QueriesListRequest) returns (QueriesListResponse);

    rpc FindBackendForQuery(FindBackendForQueryRequest) returns (Backend);
}

message Query {
    string id = 1; // required
    string text = 2; // required
    int64 received_at = 3; // required
    string client_ip = 4;
    string group_id = 5; // required
    string backend_id = 6; // required
    string username = 7;
    int64 submitted_at = 8;
}

message QueryGetRequest {
    string id = 1; // required
}

message QueryGetResponse {
    Query query = 1; // required
}

message QueriesListRequest {
    // standard
    int32 count = 1;
    enum Order {
        ASC = 0;
        DESC = 1;
    }
    Order order_by = 2;
    int32 from = 3;
    int32 to = 4;
    int32 skip = 5;
    reserved 6 to 10;

    // custom fields to filter on
    string username = 11;
    string backend_id = 12;
    string group_id = 13;
    bool successful_submission = 14;
}

message QueriesListResponse {
    repeated Query items = 1;
}

message EvaluateGroupRequest {
    int32 incoming_port = 1;
    string host = 2;
    string header_connection_properties = 3;
    string header_client_tags = 4;
}

message EvaluateGroupResponse {
    string group_id = 1; // required
}

message EvaluateBackendRequest  {
    string group_id = 1; // required
}

message FindBackendForQueryRequest {
    string query_id = 1; // required
}
